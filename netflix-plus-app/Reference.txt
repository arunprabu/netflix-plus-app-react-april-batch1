PWA?
---
 Installable Webapp 
 Installable in Chrome Family browsers (Chrome, Edge, Opera, Brave Browser) in computers
 Installable only in Android 

 example: angular.io 

Single Page App (SPA) Characteristics (7)
---------------
  1. Pages should Not Refresh [DONE]
  2. URL should be changed [DONE]
  3. History should be maintained without Page Refresh [DONE]
  4. Header and Footer should be intact. [DONE]
  5. The section in between header and footer should be updated [DONE]
  6. Active Menu should be set [TODO]
  7. Page Title should also be changed [TODO]
      Refer: learn about react-helmet in npmjs.com 

  SPA Frameworks / Libraries 
  ---------------------------
    #1 React JS (Library) 
    #2 VueJS (Framework)
    #3 Angular (Framework)

==========


Thinking in React
---
 0. Find out the number of components 
 1. Break UI into component hierarchy
 2...
 3... 


Components
--------- 
  * Reusable block of code 
  * made up of JS, JSX and CSS (optional)
  
  1. Functional Components  (shared comps should be created in src/components )
      * coded with functions 
      1.1 Functional Components with Named Function [DONE]
      1.2 Functional Components with Anonymous Function [DONE]
      1.3 Functional Components with Arrow Function [DONE] [RECOMMENDED]

      Till v16.7 (before 2018)
      ----  
        * fn components did not have state. 
        * fn components did not have lifecycle hooks

      After v16.8 (after 2018)
      ----
        * fn components can have state. 
        * fn components can have life cycle hooks kind of alternatives. 

  2. Class Components   (shared class components should be created in src/containers )
      * coded as Object oriented class 
      * will have lifecycle hooks 


JSX Limitations
---
  * it will look like HTML. But not HTML 
  * you can use any html tag in JSX. But certain attributes would differ. 
  * JSX elements must be closed. either self-closed, or separately closed 
  * class attribute should become className

Data Binding 
---
  * keep the data in a variable inside a component and display it in JSX of the comp 

  1. One Way Binding [DONE]
      * JSX can merely display the data of the variable. 

  2. Two Way Binding 
      * keep the data in a variable and display it in JSX 
        then, update the data in a variable and see the changes in JSX 

Cross Component Communication / Sharing data b/w components 
--------------------
  1. Parent to Child Component Communication [DONE]
      Using Props 

  2. Child to Parent Component Communication [DONE]
      Using Props with callback fn and event handler
  
  3. Any to Any Component Communication 
      3.1 Using React Context API (after 2019 -- React JS v16.8)
      3.2 Using ReduxJS / Zustand/ Flux / MobX / Recoil 


Concepts
-------
  Data Binding [PARTIALLY]
  Props [DONE]
  States [DONE]
  Events [DONE]
  Lists and Keys [DONE]
  Conditionals [DONE]


Project Structure
----
  src/
    components/ 
      Header/
        Header.js 
      Footer/
        Footer.js 
    containers/
    pages/    (or features/)
      HomePage/
        LatestVideo/
          LatestVideo.js 
        HomePage.js
      HooksDemoPage/ 
      HocDemoPage/
      AboutUsPage/
      ContactUsPage/
    hoc/
    

3 Ways to integrate bootstrap 
--
  1. original bootstrap 
      https://create-react-app.dev/docs/adding-bootstrap/
  2. react-bootstrap
      npm i react-bootstrap
  3. reactstrap 
      npm i reactstrap 

Naming Conventions & Casing 
----
  Casing Types 
  --------
    1. PascalCase 
        * Recommended for Object Oriented Program's classes 
        * also Recommended for Interface in Java & TypeScript 
        * all react components should be named in PascalCase
        * all components folder should be of this type 

        examples 
        ---
          class CarDetails {

          }

          interface Employee {

          }

    2. camelCase 
        * Recommended for variables, const, functions, methods in JS & TS 
        * Recommended for id's of html or JSX elements 

        examples 
        -----
          var myCar = 'BMW';

          function getCarInfo() {
            //....
          }
    
    3. kebab-case
        * Recommended for URLs 
        * Recommended for file names, folder names (if not react), assets in front end projects 
        * Recommended for css classes 
        * okay for id's of html elements if your architect says okay

        examples 
        -----
          btn-primary
          slideshow-container 
          youtube-logo.png 

    4. snake_case
        * never ever use this. 
        * okay for const in JS & TS if architect accepts

        examples
        ---
          const MAX_STUDENTS_PER_CLASS = 30;


Types of Languages based on Data Typing 
---
  1. Strictly-Typed / Strongly-Typed Languages 
      Examples: Java, C#, TypeScript 
      -----
        String myName = "Arun"; // valid
        myName = true; // compilation error
        
  2. Loosely-Typed / Dynamically-Typed Languages
      Examples: JavaScript, PHP, Python
      ------
        var myName = "Arun";  // valid 
        myName = true; // valid 
        myName = 100; // valid 
        myName = []; // valid 
        myName = {}; // valid 
        myName = undefined; // valid 
        myName = null; // valid 


Static Typechecking in ReactJS 
----
  1. TypeScript  (.tsx)
  2. FlowJS (.js)
  3. PropTypes 


How to Setup ESLint and also prettier?
=========
  Step 1: 
    npm i eslint -D 
  
  Step 2: 
    try the following command 
      npx eslint --init 
      or 
      You can also run this command directly using 'npm init @eslint/config'.

    to create .eslintrc.json 
  
  Step 3:
  --
    we can setup the rules or inherit from standard rules

  Step 4: 
  --
    we can setup prettier now... 
    create .prettierrc.json file in root folder 

    then, have the formatting rules in it 
 
    {
      "singleQuote": true,
      "trailingComma": "none"
    }

    Then, start formatiing.

    Also refer for more of prettier config here 
    https://medium.com/@frontend-newbie/integrating-prettier-with-eslint-for-your-create-react-app-in-vscode-153ebe89c1a2
    

  Step 5: 
  ---
    linting will show error in App.test.js file 
    We have to tell eslint to understand that our project has jest in it. 

    open .eslintrc.json and have the following in it 
    "env": {
      "browser": true,
      "es2021": true,
      "jest": true /// This line is needed to fix the error around JEST codes in App.test.js 
    },

  Step 6: 
  ----
  There will be a warning related to react version during linting.
  Fix it by having the following in .eslintrc.json file 

  "settings": {
    "react": {
      "version": "detect"
    }
  }

  That's it. It's over!!!
---

----
Hooks 
-----
  u

/* Ways to make REST API Calls in JS
  1. using AJAX (XMLHttpRequest)    -- Native JS
  2. using promised based fetch api (introduced in 2015  -- Native JS)
  3. using axios (third-party) 

*/
A new concept was introduced in React 16.8 - Hooks. 
They let you use state and other React features without writing a class.
Many of the features available to classes - such as lifecycle methods and states - 
are not available to functional components. 
The hooks introduced in react adds all that functionality and more.

Life Cycle Hooks and React Hooks are not same. 

This feature has loads of cools things to even replace redux .
In this example, let's build a few things just by using hooks, 
a potential alternative to redux.

Hooks enable a functional component to have state in it.
This is also called as Hook state. 

Example: 
  within a fn comp, 

  import {useState } from 'react';

  //this is a data in a variable.. not a state.
  const myProfile = {
    name: 'Arun',
    city: 'Chennai'
  }

  // to have state inside fn comp, we can use useState() . 
  // this will take in data and return getter and setter in an array. 
  // We can do array destructuring to capture both.
  const [profile, setProfile] = useState(myProfile);

  const [age, setAge] = useState(20); // valid -- can create multiple

  // then, we can log 
  console.log(profile);

  const updateProfile = () => {
    setProfile({
      name: 'VJ',
      city: 'Chennai'
    });
    console.log(profile);
  }

  And have a button in JSX to call updateProfile method.
    <button type='button' onClick={updateProfile}>Update Profile</button>

  
===

Rules of Hooks
---------------
Hooks are JavaScript functions, but they impose two additional rules:

Only call Hooks at the top level. 
Don’t call Hooks inside loops, conditions, or nested functions.
Only call Hooks from React functional components. 
Don’t call Hooks from regular JavaScript functions. 
(There is just one other valid place to call Hooks — your own custom Hooks.)

=======================

useState() Hook 
---

useEffect() - Hook 
  is what componentDidMount and componentDidUpdate to class comp 
  will get executed after render cycle 
  useEffect( () => {
    console.log('test');
  })


useCallback()
Hook prevents the child component rendering if the dependency is not changed at all 
For more refer: https://kentcdodds.com/blog/usememo-and-usecallback
Important one for performance optimization

---
useContext()
=========
  Let's us share data across components 

  Step 1: create context with any data or even null inside 
  Refer: PageContext.js 

  Step 2: Using <PageContext.Provider> to share the data across the few components 

  Step 3: Provide the data to the list of components you want to share 
  Check App.js 

  Step 4: Consume it in both Home.js and About.js 
  ----



Rules of Hooks 
  Refer: 
  https://reactjs.org/docs/hooks-rules.html





Introduction to Cases [DONE]
Styling in React [DONE]
---
  1. External Styling
      * external css from third party (ex: bootstrap)
      * our own external css 

  2. Internal Styling 
  3. Inline Styling 

Two Way Binding [DONE]
Life Cycle Hooks [DONE]

Routing [DONE]
-----
  Step 1:
  ------
    npm i react-router-dom

  Step 2: 
  -----
    Identify the Menus and the URLs

    Home                http://localhost:3001/
    About Us            http://localhost:3001/about-us 
    Contact Us          http://localhost:3001/contact-us

  Step 3: 
  ----  
    Setup the Menus with proper URLs in MenuList.js 

  Step 4:
  ----
    Identifing what comp should be loaded when I the following URL. 

    http://localhost:3001/                   --> HomePage 
    http://localhost:3001/about-us           --> AboutUsPage 
    http://localhost:3001/contact-us         --> ContactUsPage 

    Let's create the necessary components for the URLs 

  Step 5:
  -----
    Config the Routes in App.js 
    <BrowserRouter>
      <div>
        <Header></Header>

        <main className="container mt-5 pt-2">
          <Routes>
            <Route path="/" element={<HomePage />}></Route>
            <Route path="/about-us" element={<AboutUsPage />}></Route>
            <Route path="/contact-us" element={<ContactUsPage />}></Route>
          </Routes>
        </main>

        <Footer />
      </div>
    </BrowserRouter>

  Step 6:
  -----
    Let's replace <a href=''> with <Link to=''> in MenuList.js 

React without JSX [DONE]
React without ES6 [DONE]
Fragment [DONE]
Strict Mode [DONE]
Error Boundaries [DONE]
Higher Order Component - HOC [DONE]

---------------

Static Typechecking [DONE]
Typechecking With PropTypes  [DONE]
Linting  [DONE]
  ESLINT 
  Prettier 

Hooks (6-10 hours)
  useState [DONE]
  useEffect [DONE]
  useRef [DONE]
  useReducer [DONE]
  useId [DONE]
  useContext [DONE]
    
Forms and Inputs in React JS 

  No tools in React
  1. for Routing (so, use react-router-dom)
  2. for static type checking (so, use prop-types or typescript)
  3. for REST API calls (so, use axios or fetch)
  4. for form validations (so, use react-hook-form [RECOMMENDED] or formik)

REST API calls [DONE]

Unit Testing [16-20 Hours] [DONE]

Build [DONE]
  Lazy Loading / Code Splitting [DONE]
  Suspense [DONE]
  
Deployment [DONE]
Optimizing Performance [DONE]
...

Redux 




Project: Calc 
----
  Analysis 
    Design 
      Development 
        Testing 
          Deployment 
            Maintanance 

Dev => QA => (bugs) => Dev => QA => (bugs) => Dev => QA => (bugs) => Dev => QA => (QA PASSED) => Deployment 


Development
----
  Sources: FRD, HLD, LLD, Design, Style Guide

  Approach: 
  ----
    Write Test cases => write functionality => (Tools) => [PASS/FAIL] 

  Dev should prepare Test cases for add feature: 
  -----
    1. add should take in only numbers as inputs 
    2. add should return number as output 
    3. if wrong inputs entered -- add button should be disabled
    4. add button should + icon


  feature: add 
  -----
    function add(a, b){
      if(typeof a === number && typeof b === number) {
        return a + b;
      }
    }
    add(10, 20); // 30 

    <button type="button"><i className='plug-io></i>

  Tools for testing: 
  -----
    * will compare the functionality code with the test cases


Modern Software Dev Approaches 
------
  1. Test-Driven Development (TDD)  -- TO LEARN
      * Write NEW CODE only if automated test fails 

      Dev writes test cases => (FAILURE) => Dev writes functionality => (SUCCESS) => [CODE COMPLETE]

      Test Pattern: AAA (Arrange, Act, Assert)
      
      Tools: JEST JS 

  2. Behavior-Driven Development (BDD)
      * an agile s/w methodology 
      * app is documented, designed around the Behavior the end user wants to 
        experience when interacting with the app

      Dev writes Test Cases around the Behavior of the app => (FAILURE) => Dev writes functionality => (SUCCESS) => [CODE COMPLETE]

      Test Pattern: Given/When/Then 
      Tools: Jasmine JS 


Automated Testing 
----------------
  Levels 
    0. Static Type Checking [DONE]
        Examples: TypeScript or Flow JS or Prop-Types

    1. Unit Testing [TO LEARN]
        * Testing tiny, independent unit of our code 
        * Testing the component in isolation (without connecting to REST API)
        * Bug Reduction Density: 40-80%

        Tools: 
        ----  
          JEST JS (Unit Testing Framework + Test Runner)
          React Testing Library (RTL)  = DOM Querying Utility

    2. Integration Testing 
        * Testing the component by integrating multiple components together 
        * Testing the component with Service calls (REST API Calls)

        Tools: 
        -----
          JEST JS (Unit Testing Framework + Test Runner)
          React Testing Library (RTL)

    3. End to End (E2E) Testing 
        * Testing the whole app as one entity 
        * Will be done by QA team members 

        Tools: 
        ----
          * Selenium 
          * CypressJS 
          * Protractor 
          * Playwright 


To Learn 
---
  1. How to write test cases?
  2. Where to write test cases? 
  3. How to test the app by tools? 

Unit Testing Topics 
==================
  0. File walkthru [DONE]
  1. Testing JSX Elements 
      * getByText [DONE]
      * getByTestId [DONE]
      * getByPlaceholderText [DONE]
  2. Testing Props [DONE]
  3. Testing inline CSS [DONE]
  4. Testing External CSS (CSS class) [TODO]
  5. Testing Events & States [DONE]
  6. Testing Events with Buttons [DONE]
  7. Snapshot Testing [DONE]
  8. Testing Forms [DONE]
      Ref: ContactUsPage.js and ContactUsPage.test.js 
      Validate the form using test cases
      html form 

  9. Testing REST API Calls 
      * with mocks 
        1. using fetch [TODO]
            https://github.com/arunprabu/plain-ui-react-course-feb-2023/blob/master/youtube-react-app/src/pages/UnitTestingDemoPage/Users/Users.js
            https://github.com/arunprabu/plain-ui-react-course-feb-2023/blob/master/youtube-react-app/src/pages/UnitTestingDemoPage/Users/Users.test.js
            https://github.com/arunprabu/plain-ui-react-course-feb-2023/blob/master/youtube-react-app/src/utils/fetchApi.js
        2. using axios [DONE]
            positive test (DONE)
            negative test (DONE)
      * with spies 
        1. using fetch [DONE]
          positive test (DONE)
          negative test (TODO)
        2. using axios [TODO]
  10. Testing Routing [TODO]
  11. Setup and Tear Down [DONE]
  12. Code Coverage [DONE]


Note: Share Edit input default value related code to Sasikala 

Capstone Project 
-----
  Header 
  Footer 
  Menu 

  Home 
  Products 
    List 
    Details 
    Reviews [Pending]
  
  About 
  Contact 
    ContactInfo 
    ContactForm [Pending]
      use react-hook-form 


====

Build & Deployment
=====
  Production Build Checklist
  ------
    1. check for console.error -- if anything comes, fix all errors 
    2. remove all console.log
    3. check the package.json for unnecessary packages. if found, remove them
    4. fix all linting errors 
    5. have necessary code comments

  How to take prod build?
  --
    npm run build 






Important update to all Participants
-----------
All of you MUST have the proper package.json with code coverage threshold configuration. 
Refer package.json (https://github.com/arunprabu/react-course-dec-2022/blob/master/youtube-plus-react-app/package.json)
for necessary changes related to unit testing (Refer: lines 21 to 40) 
and incorporate in your project.
Without proper package.json if anybody is presenting I will reject the project. I will not review it.

Capstone Submission Checklist
----------
  1. Ensure you complete everything as per the instructions I gave you. 
     Do not cite document as reason for your implementation.
  2. Have Properly formatted code
  3. Have necessary code comments
  4. Follow proper naming, coding conventions
  5. Keep minimal console.logs
  6. Have 0 console errors
  7. Have 0 console warnings
  8. Must have 82% code coverage
  9. All functionalities must be in working state
  10. Lazy loading implemented (for at least 1 page)
  11. Unit test must have the following 
      * every component should have proper test file 
          (failure to have a test file even for one component will be considered as incomplete project)
      * router test
          Refer: https://www.youtube.com/watch?v=8wsrIbvdnzU
      * mocking api calls with resolve and reject.
      * prop testing in all components that are working with props
      * form validation positive and negative test
      * at least one snapshot test
  12. Handle 404
  

-----------
How to take a build and submit the project?
  1. Generate code coverage report
      npm run test -- --coverage --watchAll
  2. Generate build
      npm run build
  3. Zip your entire project without node_modules
  4. rename the folder 'empid-yourname-spark-clothing-app.zip'
  4. Upload in the given location
  5. Send a mail to Revathy

--------------------------




=====
ReactJS - Performace Tips
--
1. Use NPM package or any third party libraries only if they are absolutely needed.
2. Most performance issues come in lists. So, think about having pagination.
  Try this awesome package
  https://bvaughn.github.io/react-virtualized/
3. Make use of props wisely. Don't leave out unused props. 
  (
  if our app doesn't display the userId anywhere.. dont receive such a prop data)
  So, a bad way could be...
  const MyComp = (props) => { //bad way if all props are not used

  }

  but a better way to have props is here.. using object destructuring.
  cont MyComp = ({ title, body, postId}){ // ignoring userId, if I don't display it anywhere

  }
  Also,don't pass unneccessary props. 

4. Lazy Load Images 
  https://www.npmjs.com/package/react-lazy-load-image-component
5. Use profiler, network, performance, memory tabs in chrome inspector. 
    learn to record the app pages. And then check and fix the app. 
6. Use Redux Dev Tools to check how long it take for the actions.
7. Think about optimizing back end also. 
8. Avoid having unnecessary tags, css. go with Fragment, <></>, 
9. Don't bloat the page with too many components, 
  because will have lifecycle hooks and will have re-rendering cycles.
  If one parent comp updates, that will update child comp's till the last level.
  Solution could be to use Pure Components 
10. Don't have more class components. Use functional components. 
  Use hooks to stop child comp re-rendering. Remember useEffect, useCallback!
11. Don't write too many inline styles. You should definitely avoid it inside loops.
12. Don't write inline callbacks in loops. 
    // bad 
    <button onClick={() => deleteRecord()} >Delete</button> 
    // good 
    const deleteRecord = () =>{

    }
    <button onClick={deleteRecord} >Delete</button> 

13. Use Why did you update tool
    https://www.npmjs.com/package/@welldone-software/why-did-you-render
14. shouldComponentUpdate lifecycle hook
15. Learn about useMemo() Hook
16. Learn more performance tips.. There are aplenty.

===
Debugging in Production
---
https://medium.com/@baphemot/intro-to-debugging-reactjs-applications-67cf7a50b3dd

Redux 
========
  * Any to any component Communication
  * State Management 


React JS == Library 
Redux JS == Framework 
React-Redux == Official ReactJS, Redux Bindings (Glue)


State Management in ReactJS 
----
  1. React Js + Flux JS (2015)
      * very very complex 
      * steps 40-50

  2. ReactJS + Redux JS (2016 onwards)   === a.k.a class redux 
      * very complex 
      * steps 36-45
      * additional tools: (choose anyone)
          * redux-thunk (steps 36)
          * redux-saga  (steps 42+)
      * immer.js or alternatives
  
  3. React JS + Hooks (2019 react v16.8)
      * no straight-forward state mgmt solutions 
      * any to any comp commn 

  4. React JS + Redux Toolkit (2020 onwards) === a.k.a modern redux (TO LEARN)
      * super easy
      * steps 4-6
      * additional tools: (choose anyone)
          * redux-thunk (default choice)
          * redux-saga  

  5. React JS + MobX 

  6. React JS + Zustand 

=======










