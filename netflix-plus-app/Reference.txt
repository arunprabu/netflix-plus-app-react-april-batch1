PWA?
---
 Installable Webapp 
 Installable in Chrome Family browsers (Chrome, Edge, Opera, Brave Browser) in computers
 Installable only in Android 

 example: angular.io 

Single Page App (SPA) Characteristics (7)
---------------
  1. Pages should Not Refresh [DONE]
  2. URL should be changed [DONE]
  3. History should be maintained without Page Refresh [DONE]
  4. Header and Footer should be intact. [DONE]
  5. The section in between header and footer should be updated [DONE]
  6. Active Menu should be set [TODO]
  7. Page Title should also be changed [TODO]
      Refer: learn about react-helmet in npmjs.com 

  SPA Frameworks / Libraries 
  ---------------------------
    #1 React JS (Library) 
    #2 VueJS (Framework)
    #3 Angular (Framework)

==========


 
Thinking in React
---
 0. Find out the number of components 
 1. Break UI into component hierarchy

Components
--------- 
  * Reusable block of code 
  * made up of JS, JSX and CSS (optional)
  
  1. Functional Components  (shared comps should be created in src/components )
      * coded with functions 
      1.1 Functional Components with Named Function [DONE]
      1.2 Functional Components with Anonymous Function [DONE]
      1.3 Functional Components with Arrow Function [DONE] [RECOMMENDED]

  2. Class Components   (shared class components should be created in src/containers )
      * coded as Object oriented class 
      * will have lifecycle hooks 

JSX Limitations
---
  * it will look like HTML. But not HTML 
  * you can use any html tag in JSX. But certain attributes would differ. 
  * JSX elements must be closed. either self-closed, or separately closed 
  * class attribute should become className

Data Binding 
---
  * keep the data in a variable inside a component and display it in JSX of the comp 

  1. One Way Binding [DONE]
      * JSX can merely display the data of the variable. 

  2. Two Way Binding 
      * keep the data in a variable and display it in JSX 
        then, update the data in a variable and see the changes in JSX 

Cross Component Communication / Sharing data b/w components 
--------------------
  1. Parent to Child Component Communication
      Using Props 

  2. Child to Parent Component Communication
      Using Props with callback fn and event handler
  
  3. Any to Any Component Communication
      3.1 Using React Context API (after 2019 -- React JS v16.8)
      3.2 Using ReduxJS / Flux / MobX 


Concepts
-------
  Data Binding [PARTIALLY]
  Props [DONE]
  States [DONE]
  Events [DONE]
  Lists and Keys [DONE]
  Conditionals [DONE]


Project Structure
----
  src/
    components/ 
      Header/
        Header.js 
      Footer/
        Footer.js 
    containers/
    pages/    (or features/)
      HomePage/
        LatestVideo/
          LatestVideo.js 
        HomePage.js
      

3 Ways to integrate bootstrap 
--
  1. original bootstrap 
      https://create-react-app.dev/docs/adding-bootstrap/
  2. react-bootstrap
      npm i react-bootstrap
  3. reactstrap 
      npm i reactstrap 

Naming Conventions & Casing 
----
  Casing Types 
  --------
    1. PascalCase 
        * Recommended for Object Oriented Program's classes 
        * also Recommended for Interface in Java & TypeScript 
        * all react components should be named in PascalCase
        * all components folder should be of this type 

        examples 
        ---
          class CarDetails {

          }

          interface Employee {

          }

    2. camelCase 
        * Recommended for variables, const, functions, methods in JS & TS 
        * Recommended for id's of html or JSX elements 

        examples 
        -----
          var myCar = 'BMW';

          function getCarInfo() {
            //....
          }
    
    3. kebab-case
        * Recommended for URLs 
        * Recommended for file names, folder names (if not react), assets in front end projects 
        * Recommended for css classes 
        * okay for id's of html elements if your architect says okay

        examples 
        -----
          btn-primary
          slideshow-container 
          youtube-logo.png 

    4. snake_case
        * never ever use this. 
        * okay for const in JS & TS if architect accepts

        examples
        ---
          const MAX_STUDENTS_PER_CLASS = 30;


Introduction to Cases [DONE]
Styling in React [DONE]
---
  1. External Styling
      * external css from third party (ex: bootstrap)
      * our own external css 

  2. Internal Styling 
  3. Inline Styling 

Two Way Binding [DONE]
Life Cycle Hooks [DONE]

Routing [DONE]
-----
  Step 1:
  ------
    npm i react-router-dom

  Step 2: 
  -----
    Identify the Menus and the URLs

    Home                http://localhost:3001/
    About Us            http://localhost:3001/about-us 
    Contact Us          http://localhost:3001/contact-us

  Step 3: 
  ----  
    Setup the Menus with proper URLs in MenuList.js 

  Step 4:
  ----
    Identifing what comp should be loaded when I the following URL. 

    http://localhost:3001/                   --> HomePage 
    http://localhost:3001/about-us           --> AboutUsPage 
    http://localhost:3001/contact-us         --> ContactUsPage 

    Let's create the necessary components for the URLs 

  Step 5:
  -----
    Config the Routes in App.js 
    <BrowserRouter>
      <div>
        <Header></Header>

        <main className="container mt-5 pt-2">
          <Routes>
            <Route path="/" element={<HomePage />}></Route>
            <Route path="/about-us" element={<AboutUsPage />}></Route>
            <Route path="/contact-us" element={<ContactUsPage />}></Route>
          </Routes>
        </main>

        <Footer />
      </div>
    </BrowserRouter>

  Step 6:
  -----
    Let's replace <a href=''> with <Link to=''> in MenuList.js 

React without JSX [DONE]
React without ES6 [DONE]
Fragment [DONE]
Strict Mode [DONE]
Error Boundaries [DONE]
Higher Order Component - HOC [DONE]

Typechecking With PropTypes
Static Typechecking 
Linting 
Hooks (6-10 hours)
  Context API 

REST API calls 
Lazy Loading / Code Splitting
Build 
Deployment 
Optimizing Performance 
...
Unit Testing 

Redux 






